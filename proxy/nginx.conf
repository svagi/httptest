user                      nginx;
worker_processes          auto;

events {
  worker_connections      1024;
  use                     epoll;
  multi_accept            on;
}

http {
  charset                 utf-8;
  server_tokens           off;
  log_format main
    '$remote_addr - [$time_local] $host ($status $upstream_cache_status) '
    '$request "$http_user_agent" ${request_time}s '
    '#$connection/$connection_requests';
  access_log              /var/log/nginx/access.log main;

  # Default MIME types
  include                 mime.types;

  # Default gzip policy
  gzip_static           on;
  gzip                  on;
  gzip_comp_level       5;
  gzip_types            text/css text/event-stream application/javascript;

  # API container
  upstream API {
    server                api:8000;
    keepalive             16;
  }

  # Proxy cache of API container
  proxy_cache_path        /var/cache/nginx keys_zone=API_CACHE:1m levels=1:2
                          use_temp_path=off inactive=1d;

  # Default cache policy based on content type
  map $sent_http_content_type $expires {
    default               off;
    ~css                  max;
    ~javascript           max;
  }
  expires                 $expires;

  # Redirect all http requests to https
  server {
    listen                80 default_server;
    return                301 https://$host$request_uri;
  }

  # Redirect non-www to www (httptest.net only)
  server {
    listen                443 ssl;
    server_name           httptest.net;
    include               ssl/default.conf;
    return                301 https://www.httptest.net$request_uri;
  }

  # Main server with SSL/TLS only
  server {
    listen                443 ssl http2 default_server;
    include               ssl/default.conf;

    location = /favicon.ico {
      empty_gif;
      access_log              off;
    }
    location = /robots.txt {
      return                  200 "User-agent: *\nDisallow:\n";
    }
    location / {
      access_log              off;
      alias                   /api/static;
      try_files               /$uri @proxy;
      add_header              X-Frame-Options SAMEORIGIN;
      add_header              X-Content-Type-Options nosniff;
      add_header              X-XSS-Protection "1; mode=block";
      add_header              Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'";
    }
    location @proxy {
      etag on;
      proxy_pass              http://API;
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_http_version      1.1;
      proxy_set_header        Connection "";
      proxy_cache             API_CACHE;
      proxy_cache_valid       1h;
      proxy_cache_revalidate  on;
      proxy_cache_use_stale   error timeout updating http_500;
      proxy_cache_bypass      $cookie_nocache;
      add_header              X-Cache-Status $upstream_cache_status;
      add_header              X-Response-Time '${request_time}s';
      add_header              X-Frame-Options SAMEORIGIN;
      add_header              X-Content-Type-Options nosniff;
      add_header              X-XSS-Protection "1; mode=block";
      add_header              Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'";
    }
  }
}
